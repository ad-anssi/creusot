module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module Core_Ops_Function_FnOnce_Output
  type self   
  type args   
  type output   
end
module Core_Ops_Function_FnOnce_CallOnce_Interface
  type self   
  type args   
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module Core_Ops_Function_FnOnce_CallOnce
  type self   
  type args   
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module Core_Ops_Function_Fn_Call_Interface
  type self   
  type args   
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module Core_Ops_Function_Fn_Call
  type self   
  type args   
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module C03GenericBound_ClosureParam_Interface
  type f   
  val closure_param [@cfg:stackify] (f : f) : ()
end
module C03GenericBound_ClosureParam
  type f   
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = (uint32)
  clone Core_Ops_Function_Fn_Call_Interface as Call0 with type self = f, type args = (uint32),
  type Output0.output = Output0.output
  let rec cfg closure_param [@cfg:stackify] (f : f) : () = 
  var _0 : ();
  var f_1 : f;
  var _2 : f;
  var _3 : (uint32);
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    _2 <- f_1;
    _3 <- ((0 : uint32));
    _0 <- Call0.call _2 _3;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { (fun x -> true) f_1 };
    return _0
  }
  
end
