module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C01Basic_UsesClosure_Closure0_Interface
  val c01Basic_UsesClosure_Closure0 () : bool
end
module C01Basic_UsesClosure_Closure0
  type c01basic_usesclosure_closure0  = 
    | C01Basic_UsesClosure_Closure0 bool
    
  use prelude.Prelude
  let rec cfg c01Basic_UsesClosure_Closure0 () : bool = 
  var _0 : bool;
  var _1 : c01basic_usesclosure_closure0;
  {
    _1 <- _1;
    goto BB0
  }
  BB0 {
    assume { (fun x -> true) _0 };
    _0 <- (let C01Basic_UsesClosure_Closure0 a = _1 in a);
    assume { (fun x -> true) _1 };
    return _0
  }
  
end
module Core_Ops_Function_FnOnce_Output
  type self   
  type args   
  type output   
end
module Core_Ops_Function_FnOnce_CallOnce_Interface
  type self   
  type args   
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module Core_Ops_Function_FnOnce_CallOnce
  type self   
  type args   
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module Core_Ops_Function_Fn_Call_Interface
  type self   
  type args   
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module Core_Ops_Function_Fn_Call
  type self   
  type args   
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module C01Basic_UsesClosure_Interface
  val uses_closure [@cfg:stackify] () : ()
end
module C01Basic_UsesClosure
  use prelude.Prelude
  clone C01Basic_UsesClosure_Closure0 as Closure00
  let rec cfg uses_closure [@cfg:stackify] () : () = 
  var _0 : ();
  var y_1 : bool;
  var x_2 : bool;
  var _3 : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0;
  var _4 : C01Basic_UsesClosure_Closure0.c01basic_usesclosure_closure0;
  var _5 : bool;
  var _6 : ();
  {
    goto BB0
  }
  BB0 {
    y_1 <- true;
    _5 <- y_1;
    assume { (fun x -> true) y_1 };
    _4 <- C01Basic_UsesClosure_Closure0.c01Basic_UsesClosure_Closure0 _5;
    _3 <- _4;
    assume { (fun x -> true) _4 };
    _6 <- ();
    x_2 <- Closure00.closure _3 _6;
    goto BB1
  }
  BB1 {
    assume { (fun x -> true) x_2 };
    _0 <- ();
    return _0
  }
  
end
module C01Basic_NestedClosure_Closure0_Closure0_Interface
  val c01Basic_NestedClosure_Closure0_Closure0 () : bool
end
module C01Basic_NestedClosure_Closure0_Closure0
  type c01basic_nestedclosure_closure0_closure0  = 
    | C01Basic_NestedClosure_Closure0_Closure0 bool
    
  use prelude.Prelude
  let rec cfg c01Basic_NestedClosure_Closure0_Closure0 () : bool = 
  var _0 : bool;
  var _1 : c01basic_nestedclosure_closure0_closure0;
  {
    _1 <- _1;
    goto BB0
  }
  BB0 {
    assume { (fun x -> true) _0 };
    _0 <- (let C01Basic_NestedClosure_Closure0_Closure0 a = _1 in a);
    assume { (fun x -> true) _1 };
    return _0
  }
  
end
module C01Basic_NestedClosure_Closure0_Interface
  val c01Basic_NestedClosure_Closure0 () : bool
end
module C01Basic_NestedClosure_Closure0
  type c01basic_nestedclosure_closure0  = 
    | C01Basic_NestedClosure_Closure0 bool
    
  use prelude.Prelude
  clone C01Basic_NestedClosure_Closure0_Closure0 as Closure00
  let rec cfg c01Basic_NestedClosure_Closure0 () : bool = 
  var _0 : bool;
  var _1 : c01basic_nestedclosure_closure0;
  var omg_2 : C01Basic_NestedClosure_Closure0_Closure0.c01basic_nestedclosure_closure0_closure0;
  var _3 : bool;
  var _4 : C01Basic_NestedClosure_Closure0_Closure0.c01basic_nestedclosure_closure0_closure0;
  var _5 : ();
  {
    _1 <- _1;
    goto BB0
  }
  BB0 {
    _3 <- (let C01Basic_NestedClosure_Closure0 a = _1 in a);
    assume { (fun x -> true) _1 };
    omg_2 <- C01Basic_NestedClosure_Closure0_Closure0.c01Basic_NestedClosure_Closure0_Closure0 _3;
    _4 <- omg_2;
    assume { (fun x -> true) omg_2 };
    _5 <- ();
    _0 <- Closure00.closure _4 _5;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C01Basic_NestedClosure_Interface
  val nested_closure [@cfg:stackify] () : ()
end
module C01Basic_NestedClosure
  use prelude.Prelude
  clone C01Basic_NestedClosure_Closure0 as Closure00
  let rec cfg nested_closure [@cfg:stackify] () : () = 
  var _0 : ();
  var a_1 : bool;
  var a_2 : bool;
  var _3 : C01Basic_NestedClosure_Closure0.c01basic_nestedclosure_closure0;
  var _4 : C01Basic_NestedClosure_Closure0.c01basic_nestedclosure_closure0;
  var _5 : bool;
  var _6 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- true;
    _5 <- a_1;
    assume { (fun x -> true) a_1 };
    _4 <- C01Basic_NestedClosure_Closure0.c01Basic_NestedClosure_Closure0 _5;
    _3 <- _4;
    assume { (fun x -> true) _4 };
    _6 <- ();
    a_2 <- Closure00.closure _3 _6;
    goto BB1
  }
  BB1 {
    assume { (fun x -> true) a_2 };
    _0 <- ();
    return _0
  }
  
end
