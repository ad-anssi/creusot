module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module C01_Main_Interface
  val main [@cfg:stackify] () : ()
end
module C01_Main
  let rec cfg main [@cfg:stackify] () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  type a   
  use Type
  use seq.Seq
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  type a   
  use Type
  use seq.Seq
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t   
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t   
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t   
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  type a   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  type a   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t   
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t   
  predicate resolve (self : t) = 
    true
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module Alloc_Vec_Impl1_Len_Interface
  type t   
  type a   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t   
  type a   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_IndexMutSpec_InBounds_Interface
  type self   
  type i   
  predicate in_bounds (self : self) (i : i)
end
module CreusotContracts_Std1_Vec_IndexMutSpec_InBounds
  type self   
  type i   
  predicate in_bounds (self : self) (i : i)
end
module CreusotContracts_Std1_Vec_IndexMutSpec_ResolveExcept_Interface
  type self   
  type i   
  use prelude.Prelude
  predicate resolve_except (self : borrowed self) (i : i)
end
module CreusotContracts_Std1_Vec_IndexMutSpec_ResolveExcept
  type self   
  type i   
  use prelude.Prelude
  predicate resolve_except (self : borrowed self) (i : i)
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module CreusotContracts_Std1_Vec_IndexMutSpec_HasElemAt_Interface
  type self   
  type i   
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = i
  predicate has_elem_at (self : self) (i : i) (out : Output0.output)
end
module CreusotContracts_Std1_Vec_IndexMutSpec_HasElemAt
  type self   
  type i   
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = i
  predicate has_elem_at (self : self) (i : i) (out : Output0.output)
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  clone CreusotContracts_Std1_Vec_IndexMutSpec_HasElemAt_Interface as HasElemAt0 with type self = self, type i = idx,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_IndexMutSpec_ResolveExcept_Interface as ResolveExcept0 with type self = self,
  type i = idx
  clone CreusotContracts_Std1_Vec_IndexMutSpec_InBounds_Interface as InBounds0 with type self = self, type i = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {InBounds0.in_bounds ( * self) index}
    ensures { ResolveExcept0.resolve_except self index }
    ensures { HasElemAt0.has_elem_at ( ^ self) index ( ^ result) }
    ensures { HasElemAt0.has_elem_at ( * self) index ( * result) }
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  clone CreusotContracts_Std1_Vec_IndexMutSpec_HasElemAt_Interface as HasElemAt0 with type self = self, type i = idx,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_IndexMutSpec_ResolveExcept_Interface as ResolveExcept0 with type self = self,
  type i = idx
  clone CreusotContracts_Std1_Vec_IndexMutSpec_InBounds_Interface as InBounds0 with type self = self, type i = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {InBounds0.in_bounds ( * self) index}
    ensures { ResolveExcept0.resolve_except self index }
    ensures { HasElemAt0.has_elem_at ( ^ self) index ( ^ result) }
    ensures { HasElemAt0.has_elem_at ( * self) index ( * result) }
    
end
module CreusotContracts_Std1_Vec_SeqIndex_InBounds_Interface
  type self   
  type t   
  use seq.Seq
  predicate in_bounds (self : self) (s : Seq.seq t)
end
module CreusotContracts_Std1_Vec_SeqIndex_InBounds
  type self   
  type t   
  use seq.Seq
  predicate in_bounds (self : self) (s : Seq.seq t)
end
module CreusotContracts_Std1_Vec_Impl1_InBounds_Interface
  type t   
  type i   
  type a   
  use Type
  predicate in_bounds (self : Type.alloc_vec_vec t a) (i : i)
end
module CreusotContracts_Std1_Vec_Impl1_InBounds
  type t   
  type i   
  type a   
  use Type
  clone CreusotContracts_Std1_Vec_SeqIndex_InBounds_Interface as InBounds0 with type self = i, type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  predicate in_bounds (self : Type.alloc_vec_vec t a) (i : i) = 
    InBounds0.in_bounds i (Model0.model self)
end
module CreusotContracts_Std1_Vec_SeqIndex_ResolveExcept_Interface
  type self   
  type t   
  use seq.Seq
  predicate resolve_except (self : self) (old' : Seq.seq t) (new : Seq.seq t)
end
module CreusotContracts_Std1_Vec_SeqIndex_ResolveExcept
  type self   
  type t   
  use seq.Seq
  predicate resolve_except (self : self) (old' : Seq.seq t) (new : Seq.seq t)
end
module CreusotContracts_Std1_Vec_Impl1_ResolveExcept_Interface
  type t   
  type i   
  type a   
  use prelude.Prelude
  use Type
  predicate resolve_except (self : borrowed (Type.alloc_vec_vec t a)) (i : i)
end
module CreusotContracts_Std1_Vec_Impl1_ResolveExcept
  type t   
  type i   
  type a   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_SeqIndex_ResolveExcept_Interface as ResolveExcept0 with type self = i, type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  predicate resolve_except (self : borrowed (Type.alloc_vec_vec t a)) (i : i) = 
    ResolveExcept0.resolve_except i (Model0.model ( * self)) (Model0.model ( ^ self))
end
module Core_Slice_Index_SliceIndex_Output
  type self   
  type t   
  type output   
end
module CreusotContracts_Std1_Vec_SeqIndex_HasElemAt_Interface
  type self   
  type t   
  use seq.Seq
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = seq t
  predicate has_elem_at (self : self) (s : Seq.seq t) (out : Output0.output)
end
module CreusotContracts_Std1_Vec_SeqIndex_HasElemAt
  type self   
  type t   
  use seq.Seq
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = seq t
  predicate has_elem_at (self : self) (s : Seq.seq t) (out : Output0.output)
end
module CreusotContracts_Std1_Vec_Impl1_HasElemAt_Interface
  type t   
  type i   
  type a   
  use Type
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  predicate has_elem_at (self : Type.alloc_vec_vec t a) (i : i) (out : Output0.output)
end
module CreusotContracts_Std1_Vec_Impl1_HasElemAt
  type t   
  type i   
  type a   
  use Type
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_SeqIndex_HasElemAt_Interface as HasElemAt0 with type self = i, type t = t,
  type Output0.output = Output0.output
  predicate has_elem_at (self : Type.alloc_vec_vec t a) (i : i) (out : Output0.output) = 
    HasElemAt0.has_elem_at i (Model0.model self) out
end
module Alloc_Vec_Impl16_IndexMut_Interface
  type t   
  type i   
  type a   
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Vec_Impl1_HasElemAt_Interface as HasElemAt0 with type t = t, type i = i, type a = a,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_ResolveExcept_Interface as ResolveExcept0 with type t = t, type i = i,
  type a = a
  clone CreusotContracts_Std1_Vec_Impl1_InBounds_Interface as InBounds0 with type t = t, type i = i, type a = a
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds ( * self) index}
    ensures { ResolveExcept0.resolve_except self index }
    ensures { HasElemAt0.has_elem_at ( ^ self) index ( ^ result) }
    ensures { HasElemAt0.has_elem_at ( * self) index ( * result) }
    
end
module Alloc_Vec_Impl16_IndexMut
  type t   
  type i   
  type a   
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Vec_Impl1_HasElemAt_Interface as HasElemAt0 with type t = t, type i = i, type a = a,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_ResolveExcept_Interface as ResolveExcept0 with type t = t, type i = i,
  type a = a
  clone CreusotContracts_Std1_Vec_Impl1_InBounds_Interface as InBounds0 with type t = t, type i = i, type a = a
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds ( * self) index}
    ensures { ResolveExcept0.resolve_except self index }
    ensures { HasElemAt0.has_elem_at ( ^ self) index ( ^ result) }
    ensures { HasElemAt0.has_elem_at ( * self) index ( * result) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl2
  type t   
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module Alloc_Vec_Impl15_Output
  type t   
  type i   
  type a   
  use prelude.Prelude
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  type output  = 
    Output0.output
end
module Alloc_Vec_Impl16
  type t   
  type i   
  type a   
  use Type
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Std1_Vec_SeqIndex_ResolveExcept as ResolveExcept2 with type self = i, type t = t
  clone CreusotContracts_Std1_Vec_SeqIndex_InBounds as InBounds2 with type self = i, type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl1_ResolveExcept as ResolveExcept0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate ResolveExcept0.resolve_except = ResolveExcept2.resolve_except
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds2.in_bounds
  clone CreusotContracts_Std1_Vec_IndexMutSpec_ResolveExcept as ResolveExcept1 with type self = Type.alloc_vec_vec t a,
  type i = i
  clone CreusotContracts_Std1_Vec_IndexMutSpec_InBounds as InBounds1 with type self = Type.alloc_vec_vec t a, type i = i
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Vec_SeqIndex_HasElemAt as HasElemAt2 with type self = i, type t = t,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_HasElemAt as HasElemAt0 with type t = t, type i = i, type a = a,
  type Output0.output = Output0.output, function Model0.model = Model0.model,
  predicate HasElemAt0.has_elem_at = HasElemAt2.has_elem_at
  clone Alloc_Vec_Impl16_IndexMut_Interface as IndexMut0 with type t = t, type i = i, type a = a,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveExcept0.resolve_except = ResolveExcept0.resolve_except,
  predicate HasElemAt0.has_elem_at = HasElemAt0.has_elem_at, type Output0.output = Output0.output
  clone Alloc_Vec_Impl15_Output as Output1 with type t = t, type i = i, type a = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_IndexMutSpec_HasElemAt as HasElemAt1 with type self = Type.alloc_vec_vec t a,
  type i = i, type Output0.output = Output1.output
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.alloc_vec_vec t a, type idx = i,
  val index_mut = IndexMut0.index_mut, predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate ResolveExcept0.resolve_except = ResolveExcept1.resolve_except,
  predicate HasElemAt0.has_elem_at = HasElemAt1.has_elem_at, type Output0.output = Output1.output
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1
  type t   
  type i   
  type a   
  use prelude.Prelude
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Vec_SeqIndex_ResolveExcept as ResolveExcept2 with type self = i, type t = t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone Alloc_Vec_Impl15_Output as Output1 with type t = t, type i = i, type a = a, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SeqIndex_HasElemAt as HasElemAt2 with type self = i, type t = t,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_SeqIndex_InBounds as InBounds2 with type self = i, type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl1_ResolveExcept as ResolveExcept0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate ResolveExcept0.resolve_except = ResolveExcept2.resolve_except
  clone CreusotContracts_Std1_Vec_IndexMutSpec_ResolveExcept as ResolveExcept1 with type self = Type.alloc_vec_vec t a,
  type i = i, predicate resolve_except = ResolveExcept0.resolve_except
  clone CreusotContracts_Std1_Vec_Impl1_HasElemAt as HasElemAt0 with type t = t, type i = i, type a = a,
  type Output0.output = Output0.output, function Model0.model = Model0.model,
  predicate HasElemAt0.has_elem_at = HasElemAt2.has_elem_at
  clone CreusotContracts_Std1_Vec_IndexMutSpec_HasElemAt as HasElemAt1 with type self = Type.alloc_vec_vec t a,
  type i = i, predicate has_elem_at = HasElemAt0.has_elem_at, type Output0.output = Output1.output
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = t, type i = i, type a = a,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds2.in_bounds
  clone CreusotContracts_Std1_Vec_IndexMutSpec_InBounds as InBounds1 with type self = Type.alloc_vec_vec t a,
  type i = i, predicate in_bounds = InBounds0.in_bounds
end
module Core_Slice_Index_Impl2_Output
  type t   
  type output  = 
    t
end
module Core_Slice_Index_SliceIndex_Get_Interface
  type self   
  type t   
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Get
  type self   
  type t   
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get [@cfg:stackify] (self : self) (slice : t) : Type.core_option_option Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut_Interface
  type self   
  type t   
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetMut
  type self   
  type t   
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val get_mut [@cfg:stackify] (self : self) (slice : borrowed t) : Type.core_option_option (borrowed Output0.output)
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked_Interface
  type self   
  type t   
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUnchecked
  type self   
  type t   
  use prelude.Prelude
  val get_unchecked [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface
  type self   
  type t   
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_GetUncheckedMut
  type self   
  type t   
  use prelude.Prelude
  val get_unchecked_mut [@cfg:stackify] (self : self) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index_Interface
  type self   
  type t   
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_Index
  type self   
  type t   
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index [@cfg:stackify] (self : self) (slice : t) : Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut_Interface
  type self   
  type t   
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_SliceIndex_IndexMut
  type self   
  type t   
  use prelude.Prelude
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  val index_mut [@cfg:stackify] (self : self) (slice : borrowed t) : borrowed Output0.output
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Get
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get [@cfg:stackify] (self : usize) (slice : seq t) : Type.core_option_option t
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetMut
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use Type
  val get_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUnchecked
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_GetUncheckedMut
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val get_unchecked_mut [@cfg:stackify] (self : usize) (slice : opaque_ptr) : opaque_ptr
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_Index
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index [@cfg:stackify] (self : usize) (slice : seq t) : t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2_IndexMut
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  val index_mut [@cfg:stackify] (self : usize) (slice : borrowed (seq t)) : borrowed t
    requires {false}
    
end
module Core_Slice_Index_Impl2
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone Core_Slice_Index_Impl2_IndexMut_Interface as IndexMut0 with type t = t
  clone Core_Slice_Index_Impl2_Index_Interface as Index0 with type t = t
  clone Core_Slice_Index_Impl2_GetUncheckedMut_Interface as GetUncheckedMut0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUncheckedMut_Interface as GetUncheckedMut1 with type self = usize,
  type t = seq t, val get_unchecked_mut = GetUncheckedMut0.get_unchecked_mut
  clone Core_Slice_Index_Impl2_GetUnchecked_Interface as GetUnchecked0 with type t = t
  clone Core_Slice_Index_SliceIndex_GetUnchecked_Interface as GetUnchecked1 with type self = usize, type t = seq t,
  val get_unchecked = GetUnchecked0.get_unchecked
  clone Core_Slice_Index_Impl2_GetMut_Interface as GetMut0 with type t = t
  clone Core_Slice_Index_Impl2_Get_Interface as Get0 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone Core_Slice_Index_SliceIndex_IndexMut_Interface as IndexMut1 with type self = usize, type t = seq t,
  val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Index_Interface as Index1 with type self = usize, type t = seq t,
  val index = Index0.index, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_GetMut_Interface as GetMut1 with type self = usize, type t = seq t,
  val get_mut = GetMut0.get_mut, type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Get_Interface as Get1 with type self = usize, type t = seq t, val get = Get0.get,
  type Output0.output = Output0.output
  clone Core_Slice_Index_SliceIndex_Output as Output1 with type self = usize, type t = seq t,
  type output = Output0.output
end
module CreusotContracts_Std1_Vec_Impl2_InBounds_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds (self : usize) (s : Seq.seq t)
end
module CreusotContracts_Std1_Vec_Impl2_InBounds
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds (self : usize) (s : Seq.seq t) = 
    UInt64.to_int self < Seq.length s
end
module CreusotContracts_Std1_Vec_Impl2_HasElemAt_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_elem_at (self : usize) (s : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Vec_Impl2_HasElemAt
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_elem_at (self : usize) (s : Seq.seq t) (out : t) = 
    Seq.get s (UInt64.to_int self) = out
end
module CreusotContracts_Std1_Vec_Impl2_ResolveExcept_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_except (self : usize) (old' : Seq.seq t) (new : Seq.seq t)
end
module CreusotContracts_Std1_Vec_Impl2_ResolveExcept
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_except (self : usize) (old' : Seq.seq t) (new : Seq.seq t) = 
    Seq.length old' = Seq.length new && (forall i : (int) . 0 <= i && i <> UInt64.to_int self && i < Seq.length old' -> Seq.get old' i = Seq.get new i)
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl2_ResolveExcept as ResolveExcept0 with type t = t
  clone CreusotContracts_Std1_Vec_SeqIndex_ResolveExcept as ResolveExcept1 with type self = usize, type t = t,
  predicate resolve_except = ResolveExcept0.resolve_except
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl2_HasElemAt as HasElemAt0 with type t = t
  clone CreusotContracts_Std1_Vec_SeqIndex_HasElemAt as HasElemAt1 with type self = usize, type t = t,
  predicate has_elem_at = HasElemAt0.has_elem_at, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl2_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Std1_Vec_SeqIndex_InBounds as InBounds1 with type self = usize, type t = t,
  predicate in_bounds = InBounds0.in_bounds
end
module C01_AllZero_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = uint32, type a = Type.alloc_alloc_global
  val all_zero [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global))) : ()
    ensures { Seq.length (Model0.model ( * v)) = Seq.length (Model0.model ( ^ v)) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model ( ^ v)) -> Seq.get (Model0.model ( ^ v)) i = (0 : uint32) }
    
end
module C01_AllZero
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint32, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global))
  clone CreusotContracts_Std1_Vec_Impl2_HasElemAt as HasElemAt1 with type t = uint32
  clone CreusotContracts_Std1_Vec_Impl2_ResolveExcept as ResolveExcept1 with type t = uint32
  clone CreusotContracts_Std1_Vec_Impl2_InBounds as InBounds1 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = uint32
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint32
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = uint32, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)))
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global))
  clone CreusotContracts_Std1_Vec_Impl1_HasElemAt as HasElemAt0 with type t = uint32, type i = usize,
  type a = Type.alloc_alloc_global, type Output0.output = Output0.output, function Model0.model = Model1.model,
  predicate HasElemAt0.has_elem_at = HasElemAt1.has_elem_at
  clone CreusotContracts_Std1_Vec_Impl1_ResolveExcept as ResolveExcept0 with type t = uint32, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate ResolveExcept0.resolve_except = ResolveExcept1.resolve_except
  clone CreusotContracts_Std1_Vec_Impl1_InBounds as InBounds0 with type t = uint32, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds
  clone Alloc_Vec_Impl16_IndexMut_Interface as IndexMut0 with type t = uint32, type i = usize,
  type a = Type.alloc_alloc_global, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveExcept0.resolve_except = ResolveExcept0.resolve_except,
  predicate HasElemAt0.has_elem_at = HasElemAt0.has_elem_at, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.alloc_vec_vec uint32 (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = uint32, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)),
  function Model0.model = Model0.model
  let rec cfg all_zero [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global))) : ()
    ensures { Seq.length (Model1.model ( * v)) = Seq.length (Model1.model ( ^ v)) }
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model ( ^ v)) -> Seq.get (Model1.model ( ^ v)) i = (0 : uint32) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global));
  var i_2 : usize;
  var old_v_3 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)));
  var _4 : borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global));
  var _5 : borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global));
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global);
  var _11 : borrowed uint32;
  var _12 : borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global));
  var _13 : usize;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    _5 <- v_1;
    _4 <- _5;
    assume { Resolve0.resolve _5 };
    old_v_3 <- Record0.record _4;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_v_3 };
    goto BB2
  }
  BB2 {
    invariant proph_const {  ^ v_1 =  ^ Model0.model old_v_3 };
    invariant in_bounds { Seq.length (Model1.model ( * v_1)) = Seq.length (Model1.model ( * Model0.model old_v_3)) };
    invariant all_zero { forall j : (int) . 0 <= j && j < UInt64.to_int i_2 -> Seq.get (Model1.model ( * v_1)) j = (0 : uint32) };
    assume { Resolve2.resolve _8 };
    _8 <- i_2;
    _10 <-  * v_1;
    _9 <- Len0.len _10;
    goto BB3
  }
  BB3 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB6
      | _ -> goto BB4
      end
  }
  BB4 {
    _12 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _12) };
    assume { Resolve2.resolve _13 };
    _13 <- i_2;
    _11 <- IndexMut0.index_mut _12 _13;
    goto BB5
  }
  BB5 {
    _11 <- { _11 with current = (0 : uint32) };
    assume { Resolve3.resolve _11 };
    i_2 <- i_2 + (1 : usize);
    _6 <- ();
    assume { Resolve4.resolve _6 };
    goto BB2
  }
  BB6 {
    assume { Resolve5.resolve v_1 };
    assume { Resolve2.resolve i_2 };
    _0 <- ();
    return _0
  }
  
end
