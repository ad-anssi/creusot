module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type creusotcontracts_std1_vec_vec 't  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module C08Haystack_MatchAt_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  predicate match_at (needle : Type.creusotcontracts_std1_vec_vec uint8) (haystack : Type.creusotcontracts_std1_vec_vec uint8) (pos : int) (len : int)
    
end
module C08Haystack_MatchAt
  use prelude.Prelude
  use Type
  use mach.int.Int
  use prelude.UInt8
  use seq.Seq
  use mach.int.Int32
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = uint8
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate match_at (needle : Type.creusotcontracts_std1_vec_vec uint8) (haystack : Type.creusotcontracts_std1_vec_vec uint8) (pos : int) (len : int)
    
   = 
    len <= Seq.length (Model0.model needle) && pos <= Seq.length (Model0.model haystack) - len && (forall i : (int) . 0 <= i && i < len -> Seq.get (Model0.model needle) i = Seq.get (Model0.model haystack) (pos + i))
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t   
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t   
  predicate resolve (self : t) = 
    true
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl2
  type t   
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module C08Haystack_Search_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone C08Haystack_MatchAt_Interface as MatchAt0
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = uint8
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val search [@cfg:stackify] (needle : Type.creusotcontracts_std1_vec_vec uint8) (haystack : Type.creusotcontracts_std1_vec_vec uint8) : usize
    requires {Seq.length (Model0.model needle) >= 1 && Seq.length (Model0.model needle) <= Seq.length (Model0.model haystack)}
    ensures { UInt64.to_int result = Seq.length (Model0.model haystack) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model haystack) -> not (MatchAt0.match_at needle haystack i (Seq.length (Model0.model needle)))) }
    ensures { UInt64.to_int result < Seq.length (Model0.model haystack) -> MatchAt0.match_at needle haystack (UInt64.to_int result) (Seq.length (Model0.model needle)) && (forall i : (int) . 0 <= i && i < UInt64.to_int result -> not (MatchAt0.match_at needle haystack i (Seq.length (Model0.model needle)))) }
    ensures { UInt64.to_int result = Seq.length (Model0.model haystack) || UInt64.to_int result < Seq.length (Model0.model haystack) - Seq.length (Model0.model needle) + 1 }
    
end
module C08Haystack_Search
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use prelude.UInt8
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint8
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = uint8
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec uint8,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone C08Haystack_MatchAt as MatchAt0 with function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = Type.creusotcontracts_std1_vec_vec uint8
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = uint8
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = uint8,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = uint8, function Model0.model = Model0.model
  let rec cfg search [@cfg:stackify] (needle : Type.creusotcontracts_std1_vec_vec uint8) (haystack : Type.creusotcontracts_std1_vec_vec uint8) : usize
    requires {Seq.length (Model0.model needle) >= 1 && Seq.length (Model0.model needle) <= Seq.length (Model0.model haystack)}
    ensures { UInt64.to_int result = Seq.length (Model0.model haystack) -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model haystack) -> not (MatchAt0.match_at needle haystack i (Seq.length (Model0.model needle)))) }
    ensures { UInt64.to_int result < Seq.length (Model0.model haystack) -> MatchAt0.match_at needle haystack (UInt64.to_int result) (Seq.length (Model0.model needle)) && (forall i : (int) . 0 <= i && i < UInt64.to_int result -> not (MatchAt0.match_at needle haystack i (Seq.length (Model0.model needle)))) }
    ensures { UInt64.to_int result = Seq.length (Model0.model haystack) || UInt64.to_int result < Seq.length (Model0.model haystack) - Seq.length (Model0.model needle) + 1 }
    
   = 
  var _0 : usize;
  var needle_1 : Type.creusotcontracts_std1_vec_vec uint8;
  var haystack_2 : Type.creusotcontracts_std1_vec_vec uint8;
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : usize;
  var _11 : usize;
  var _12 : Type.creusotcontracts_std1_vec_vec uint8;
  var _13 : usize;
  var _14 : Type.creusotcontracts_std1_vec_vec uint8;
  var j_15 : usize;
  var _16 : ();
  var _17 : ();
  var _18 : bool;
  var _19 : usize;
  var _20 : usize;
  var _21 : Type.creusotcontracts_std1_vec_vec uint8;
  var _22 : ();
  var _23 : ();
  var _24 : bool;
  var _25 : uint8;
  var _26 : uint8;
  var _27 : Type.creusotcontracts_std1_vec_vec uint8;
  var _28 : usize;
  var _29 : uint8;
  var _30 : uint8;
  var _31 : Type.creusotcontracts_std1_vec_vec uint8;
  var _32 : usize;
  var _33 : usize;
  var _34 : usize;
  var _35 : ();
  var _36 : ();
  var _37 : ();
  var _38 : ();
  var _39 : ();
  var _40 : ();
  var _41 : bool;
  var _42 : usize;
  var _43 : usize;
  var _44 : Type.creusotcontracts_std1_vec_vec uint8;
  var _45 : ();
  var _46 : ();
  var _47 : ();
  var _48 : ();
  var _49 : ();
  var _50 : Type.creusotcontracts_std1_vec_vec uint8;
  {
    needle_1 <- needle;
    haystack_2 <- haystack;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant no_match { forall k : (int) . 0 <= k && k < UInt64.to_int i_3 -> not (MatchAt0.match_at needle_1 haystack_2 k (Seq.length (Model0.model needle_1))) };
    assume { Resolve0.resolve _8 };
    _8 <- i_3;
    _12 <- haystack_2;
    _11 <- Len0.len _12;
    goto BB2
  }
  BB2 {
    _14 <- needle_1;
    _13 <- Len0.len _14;
    goto BB3
  }
  BB3 {
    _10 <- _11 - _13;
    _9 <- _10 + (1 : usize);
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB17
      | _ -> goto BB4
      end
  }
  BB4 {
    j_15 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant partial_match { MatchAt0.match_at needle_1 haystack_2 (UInt64.to_int i_3) (UInt64.to_int j_15) };
    assume { Resolve0.resolve _19 };
    _19 <- j_15;
    _21 <- needle_1;
    _20 <- Len0.len _21;
    goto BB6
  }
  BB6 {
    _18 <- _19 < _20;
    switch (_18)
      | False -> goto BB12
      | _ -> goto BB7
      end
  }
  BB7 {
    assert { UInt64.to_int j_15 <= Seq.length (Model0.model needle_1) };
    _22 <- ();
    assume { Resolve1.resolve _22 };
    _27 <- needle_1;
    assume { Resolve0.resolve _28 };
    _28 <- j_15;
    _26 <- Index0.index _27 _28;
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve _25 };
    _25 <- _26;
    assume { Resolve3.resolve _26 };
    _31 <- haystack_2;
    assume { Resolve0.resolve _33 };
    _33 <- i_3;
    assume { Resolve0.resolve _34 };
    _34 <- j_15;
    _32 <- _33 + _34;
    _30 <- Index0.index _31 _32;
    goto BB9
  }
  BB9 {
    assume { Resolve2.resolve _29 };
    _29 <- _30;
    assume { Resolve3.resolve _30 };
    _24 <- _25 <> _29;
    switch (_24)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _17 <- ();
    assume { Resolve1.resolve _17 };
    goto BB13
  }
  BB11 {
    _23 <- ();
    assume { Resolve1.resolve _23 };
    j_15 <- j_15 + (1 : usize);
    _6 <- ();
    assume { Resolve1.resolve _6 };
    goto BB5
  }
  BB12 {
    _17 <- ();
    assume { Resolve1.resolve _17 };
    goto BB13
  }
  BB13 {
    _16 <- ();
    assume { Resolve1.resolve _16 };
    assert { false };
    _39 <- ();
    assume { Resolve1.resolve _39 };
    assume { Resolve0.resolve _42 };
    _42 <- j_15;
    assume { Resolve0.resolve j_15 };
    _44 <- needle_1;
    _43 <- Len0.len _44;
    goto BB14
  }
  BB14 {
    _41 <- _42 = _43;
    switch (_41)
      | False -> goto BB16
      | _ -> goto BB15
      end
  }
  BB15 {
    assume { Resolve4.resolve needle_1 };
    assume { Resolve4.resolve haystack_2 };
    assume { Resolve0.resolve _0 };
    _0 <- i_3;
    assume { Resolve0.resolve i_3 };
    goto BB19
  }
  BB16 {
    _40 <- ();
    assume { Resolve1.resolve _40 };
    i_3 <- i_3 + (1 : usize);
    _6 <- ();
    assume { Resolve1.resolve _6 };
    goto BB1
  }
  BB17 {
    assume { Resolve4.resolve needle_1 };
    assume { Resolve0.resolve i_3 };
    _5 <- ();
    assume { Resolve1.resolve _5 };
    _4 <- ();
    assume { Resolve1.resolve _4 };
    _50 <- haystack_2;
    assume { Resolve4.resolve haystack_2 };
    _0 <- Len0.len _50;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
