module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type creusotcontracts_std1_vec_vec 't  
  type hashmap_list  = 
    | Hashmap_List_Nil
    | Hashmap_List_Cons uint32 int64 (hashmap_list)
    
  function hashmap_list_Cons_0 (self : hashmap_list) : uint32
  val hashmap_list_Cons_0 (self : hashmap_list) : uint32
    ensures { result = hashmap_list_Cons_0 self }
    
  axiom hashmap_list_Cons_0_acc : forall a : uint32, b : int64, c : hashmap_list . hashmap_list_Cons_0 (Hashmap_List_Cons a b c : hashmap_list) = a
  function hashmap_list_Cons_1 (self : hashmap_list) : int64
  val hashmap_list_Cons_1 (self : hashmap_list) : int64
    ensures { result = hashmap_list_Cons_1 self }
    
  axiom hashmap_list_Cons_1_acc : forall a : uint32, b : int64, c : hashmap_list . hashmap_list_Cons_1 (Hashmap_List_Cons a b c : hashmap_list) = b
  function hashmap_list_Cons_2 (self : hashmap_list) : hashmap_list
  val hashmap_list_Cons_2 (self : hashmap_list) : hashmap_list
    ensures { result = hashmap_list_Cons_2 self }
    
  axiom hashmap_list_Cons_2_acc : forall a : uint32, b : int64, c : hashmap_list . hashmap_list_Cons_2 (Hashmap_List_Cons a b c : hashmap_list) = c
  type hashmap_myhashmap  = 
    | Hashmap_MyHashMap (creusotcontracts_std1_vec_vec (hashmap_list))
    
  function hashmap_myhashmap_MyHashMap_buckets (self : hashmap_myhashmap) : creusotcontracts_std1_vec_vec (hashmap_list)
  val hashmap_myhashmap_MyHashMap_buckets (self : hashmap_myhashmap) : creusotcontracts_std1_vec_vec (hashmap_list)
    ensures { result = hashmap_myhashmap_MyHashMap_buckets self }
    
  axiom hashmap_myhashmap_MyHashMap_buckets_acc : forall a : creusotcontracts_std1_vec_vec (hashmap_list) . hashmap_myhashmap_MyHashMap_buckets (Hashmap_MyHashMap a : hashmap_myhashmap) = a
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module Hashmap_Impl1_Model_Interface
  use Type
  use map.Map
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int64
  function model (self : Type.hashmap_myhashmap) : Map.map uint32 (Type.core_option_option int64)
end
module Hashmap_Impl1_Model
  use Type
  use map.Map
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int64
  function model (self : Type.hashmap_myhashmap) : Map.map uint32 (Type.core_option_option int64)
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module Hashmap_BucketInv_Interface
  use Type
  use mach.int.Int
  predicate bucket_inv (l : Type.hashmap_list) (index : int) (size : int)
end
module Hashmap_BucketInv
  use Type
  use mach.int.Int
  use mach.int.UInt32
  predicate bucket_inv (l : Type.hashmap_list) (index : int) (size : int) = 
    match (l) with
      | Type.Hashmap_List_Nil -> true
      | Type.Hashmap_List_Cons k _ tl -> mod (UInt32.to_int k) size = index && bucket_inv tl index size
      end
end
module Hashmap_Impl2_HashmapInv_Interface
  use prelude.Prelude
  use Type
  predicate hashmap_inv (self : Type.hashmap_myhashmap)
end
module Hashmap_Impl2_HashmapInv
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone Hashmap_BucketInv_Interface as BucketInv0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.hashmap_list
  predicate hashmap_inv (self : Type.hashmap_myhashmap) = 
    0 < Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self)) && (forall i : (int) . 0 <= i && i < Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self)) -> BucketInv0.bucket_inv (Seq.get (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self)) i) i (Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self))))
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module Hashmap_Impl1_ModelTy
  use map.Map
  use mach.int.Int
  use mach.int.UInt32
  use Type
  use mach.int.Int64
  type modelTy  = 
    Map.map uint32 (Type.core_option_option int64)
end
module Hashmap_Impl1
  use Type
  clone Hashmap_Impl1_Model as Model0
  clone Hashmap_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.hashmap_myhashmap,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.hashmap_myhashmap,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_FromElem_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Std1_Vec_FromElem
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Hashmap_Create_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use mach.int.UInt32
  use map.Map
  use Type
  use prelude.Prelude
  clone Hashmap_Impl2_HashmapInv_Interface as HashmapInv0
  clone Hashmap_Impl1_Model_Interface as Model0
  val create [@cfg:stackify] (size : usize) : Type.hashmap_myhashmap
    requires {0 < UInt64.to_int size}
    ensures { forall i : (uint32) . Map.get (Model0.model result) i = Type.Core_Option_Option_None }
    ensures { HashmapInv0.hashmap_inv result }
    
end
module Hashmap_Create
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use mach.int.UInt32
  use map.Map
  use Type
  use prelude.Prelude
  clone Hashmap_BucketInv as BucketInv0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.hashmap_list
  clone Hashmap_Impl2_HashmapInv as HashmapInv0 with function Model0.model = Model1.model,
  predicate BucketInv0.bucket_inv = BucketInv0.bucket_inv
  clone Hashmap_Impl1_Model as Model0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem0 with type t = Type.hashmap_list,
  function Model0.model = Model1.model
  let rec cfg create [@cfg:stackify] (size : usize) : Type.hashmap_myhashmap
    requires {0 < UInt64.to_int size}
    ensures { forall i : (uint32) . Map.get (Model0.model result) i = Type.Core_Option_Option_None }
    ensures { HashmapInv0.hashmap_inv result }
    
   = 
  var _0 : Type.hashmap_myhashmap;
  var size_1 : usize;
  var _2 : Type.creusotcontracts_std1_vec_vec (Type.hashmap_list);
  var _3 : Type.hashmap_list;
  var _4 : usize;
  {
    size_1 <- size;
    goto BB0
  }
  BB0 {
    _3 <- Type.Hashmap_List_Nil;
    assume { Resolve0.resolve _4 };
    _4 <- size_1;
    assume { Resolve0.resolve size_1 };
    _2 <- FromElem0.from_elem _3 _4;
    goto BB1
  }
  BB1 {
    _0 <- Type.Hashmap_MyHashMap _2;
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module Hashmap_Impl2_Get_Interface
  use map.Map
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int64
  clone Hashmap_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.hashmap_myhashmap,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl2_HashmapInv_Interface as HashmapInv0
  val get [@cfg:stackify] (self : Type.hashmap_myhashmap) (key : uint32) : Type.core_option_option int64
    requires {HashmapInv0.hashmap_inv self}
    ensures { result = Map.get (Model0.model self) key }
    
end
module Hashmap_Impl2_Get
  use map.Map
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int64
  clone Hashmap_Impl1_Model as Model2
  clone Hashmap_Impl1_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.hashmap_myhashmap,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone Hashmap_BucketInv as BucketInv0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.hashmap_list
  clone Hashmap_Impl2_HashmapInv as HashmapInv0 with function Model0.model = Model1.model,
  predicate BucketInv0.bucket_inv = BucketInv0.bucket_inv
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.hashmap_list
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = uint32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.hashmap_list
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.hashmap_myhashmap
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.hashmap_list
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = uint32
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (Type.hashmap_list),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.hashmap_list,
  function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.hashmap_list,
  function Model0.model = Model3.model
  let rec cfg get [@cfg:stackify] (self : Type.hashmap_myhashmap) (key : uint32) : Type.core_option_option int64
    requires {HashmapInv0.hashmap_inv self}
    ensures { result = Map.get (Model0.model self) key }
    
   = 
  var _0 : Type.core_option_option int64;
  var self_1 : Type.hashmap_myhashmap;
  var key_2 : uint32;
  var _3 : ();
  var index_4 : usize;
  var _5 : usize;
  var _6 : uint32;
  var _7 : usize;
  var _8 : Type.creusotcontracts_std1_vec_vec (Type.hashmap_list);
  var _9 : bool;
  var l_10 : Type.hashmap_list;
  var _11 : Type.hashmap_list;
  var _12 : Type.hashmap_list;
  var _13 : Type.creusotcontracts_std1_vec_vec (Type.hashmap_list);
  var _14 : usize;
  var _15 : ();
  var _16 : ();
  var _17 : isize;
  var k_18 : uint32;
  var v_19 : int64;
  var tl_20 : Type.hashmap_list;
  var _21 : ();
  var _22 : bool;
  var _23 : uint32;
  var _24 : uint32;
  var _25 : ();
  var _26 : int64;
  var _27 : Type.hashmap_list;
  var _28 : Type.hashmap_list;
  var _29 : ();
  var _30 : ();
  var _31 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _6 };
    _6 <- key_2;
    _5 <- UInt64.of_int (UInt32.to_int _6);
    _8 <- Type.hashmap_myhashmap_MyHashMap_buckets self_1;
    _7 <- Len0.len _8;
    goto BB1
  }
  BB1 {
    _9 <- _7 = (0 : usize);
    assert { not _9 };
    goto BB2
  }
  BB2 {
    index_4 <- _5 % _7;
    _13 <- Type.hashmap_myhashmap_MyHashMap_buckets self_1;
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _14 };
    _14 <- index_4;
    assume { Resolve2.resolve index_4 };
    _12 <- Index0.index _13 _14;
    goto BB3
  }
  BB3 {
    _11 <- _12;
    assume { Resolve3.resolve _12 };
    l_10 <- _11;
    assume { Resolve3.resolve _11 };
    goto BB4
  }
  BB4 {
    switch (l_10)
      | Type.Hashmap_List_Cons _ _ _ -> goto BB5
      | _ -> goto BB8
      end
  }
  BB5 {
    k_18 <- Type.hashmap_list_Cons_0 l_10;
    v_19 <- Type.hashmap_list_Cons_1 l_10;
    tl_20 <- Type.hashmap_list_Cons_2 l_10;
    assume { Resolve3.resolve l_10 };
    assume { Resolve0.resolve _23 };
    _23 <- k_18;
    assume { Resolve5.resolve k_18 };
    assume { Resolve0.resolve _24 };
    _24 <- key_2;
    _22 <- _23 = _24;
    switch (_22)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve0.resolve key_2 };
    assume { Resolve6.resolve tl_20 };
    assume { Resolve7.resolve _26 };
    _26 <- v_19;
    assume { Resolve8.resolve v_19 };
    _0 <- Type.Core_Option_Option_Some _26;
    goto BB9
  }
  BB7 {
    assume { Resolve8.resolve v_19 };
    _21 <- ();
    assume { Resolve4.resolve _21 };
    _28 <- tl_20;
    assume { Resolve6.resolve tl_20 };
    _27 <- _28;
    assume { Resolve3.resolve _28 };
    assume { Resolve3.resolve l_10 };
    l_10 <- _27;
    _16 <- ();
    assume { Resolve4.resolve _16 };
    goto BB4
  }
  BB8 {
    assume { Resolve0.resolve key_2 };
    assume { Resolve3.resolve l_10 };
    _15 <- ();
    assume { Resolve4.resolve _15 };
    _0 <- Type.Core_Option_Option_None;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Core_Mem_Replace_Interface
  type t   
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    requires {false}
    
end
module Core_Mem_Replace
  type t   
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module Hashmap_Impl2_Add_Interface
  use mach.int.Int
  use mach.int.UInt32
  use map.Map
  use Type
  use prelude.Prelude
  use mach.int.Int64
  clone Hashmap_Impl1_Model_Interface as Model0
  clone Hashmap_Impl2_HashmapInv_Interface as HashmapInv0
  val add [@cfg:stackify] (self : borrowed (Type.hashmap_myhashmap)) (key : uint32) (val' : int64) : ()
    requires {HashmapInv0.hashmap_inv ( * self)}
    ensures { forall i : (uint32) . Map.get (Model0.model ( ^ self)) i = (if UInt32.to_int i = UInt32.to_int key then
      Type.Core_Option_Option_Some val'
    else
      Map.get (Model0.model ( * self)) i
    ) }
    ensures { HashmapInv0.hashmap_inv ( ^ self) }
    
end
module Hashmap_Impl2_Add
  use mach.int.Int
  use mach.int.UInt32
  use map.Map
  use Type
  use prelude.Prelude
  use mach.int.Int64
  clone Hashmap_Impl1_Model as Model0
  clone Hashmap_BucketInv as BucketInv0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.hashmap_list
  clone Hashmap_Impl2_HashmapInv as HashmapInv0 with function Model0.model = Model1.model,
  predicate BucketInv0.bucket_inv = BucketInv0.bucket_inv
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve9 with type t = int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve8 with type t = Type.hashmap_list
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.hashmap_myhashmap
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.hashmap_list
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = int64
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.hashmap_list
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.hashmap_list
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.hashmap_list
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = uint32
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (Type.hashmap_list),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = Type.hashmap_list,
  function Model0.model = Model1.model, function Model1.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.creusotcontracts_std1_vec_vec (Type.hashmap_list),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.hashmap_list,
  function Model0.model = Model2.model
  let rec cfg add [@cfg:stackify] (self : borrowed (Type.hashmap_myhashmap)) (key : uint32) (val' : int64) : ()
    requires {HashmapInv0.hashmap_inv ( * self)}
    ensures { forall i : (uint32) . Map.get (Model0.model ( ^ self)) i = (if UInt32.to_int i = UInt32.to_int key then
      Type.Core_Option_Option_Some val'
    else
      Map.get (Model0.model ( * self)) i
    ) }
    ensures { HashmapInv0.hashmap_inv ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.hashmap_myhashmap);
  var key_2 : uint32;
  var val'_3 : int64;
  var index_4 : usize;
  var _5 : usize;
  var _6 : uint32;
  var _7 : usize;
  var _8 : Type.creusotcontracts_std1_vec_vec (Type.hashmap_list);
  var _9 : bool;
  var l_10 : borrowed (Type.hashmap_list);
  var _11 : borrowed (Type.hashmap_list);
  var _12 : borrowed (Type.hashmap_list);
  var _13 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.hashmap_list));
  var _14 : usize;
  var _15 : ();
  var _16 : ();
  var _17 : isize;
  var k_18 : borrowed uint32;
  var v_19 : borrowed int64;
  var tl_20 : borrowed (Type.hashmap_list);
  var _21 : bool;
  var _22 : uint32;
  var _23 : uint32;
  var _24 : ();
  var _25 : int64;
  var _26 : borrowed (Type.hashmap_list);
  var _27 : borrowed (Type.hashmap_list);
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var l_31 : Type.hashmap_list;
  var _32 : borrowed (Type.hashmap_list);
  var _33 : borrowed (Type.hashmap_list);
  var _34 : borrowed (Type.hashmap_list);
  var _35 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.hashmap_list));
  var _36 : usize;
  var _37 : Type.hashmap_list;
  var _38 : Type.hashmap_list;
  var _39 : uint32;
  var _40 : int64;
  var _41 : Type.hashmap_list;
  var _42 : Type.hashmap_list;
  var _43 : borrowed (Type.hashmap_list);
  var _44 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.hashmap_list));
  var _45 : usize;
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _6 };
    _6 <- key_2;
    _5 <- UInt64.of_int (UInt32.to_int _6);
    _8 <- Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1);
    _7 <- Len0.len _8;
    goto BB1
  }
  BB1 {
    _9 <- _7 = (0 : usize);
    assert { not _9 };
    goto BB2
  }
  BB2 {
    index_4 <- _5 % _7;
    _13 <- borrow_mut (Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1));
    self_1 <- { self_1 with current = (let Type.Hashmap_MyHashMap a =  * self_1 in Type.Hashmap_MyHashMap ( ^ _13)) };
    assume { Resolve1.resolve _14 };
    _14 <- index_4;
    _12 <- IndexMut0.index_mut _13 _14;
    goto BB3
  }
  BB3 {
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    assume { Resolve2.resolve _12 };
    l_10 <- borrow_mut ( * _11);
    _11 <- { _11 with current = ( ^ l_10) };
    assume { Resolve2.resolve _11 };
    goto BB4
  }
  BB4 {
    switch ( * l_10)
      | Type.Hashmap_List_Cons _ _ _ -> goto BB5
      | _ -> goto BB8
      end
  }
  BB5 {
    k_18 <- borrow_mut (Type.hashmap_list_Cons_0 ( * l_10));
    l_10 <- { l_10 with current = (let Type.Hashmap_List_Cons a b c =  * l_10 in Type.Hashmap_List_Cons ( ^ k_18) b c) };
    v_19 <- borrow_mut (Type.hashmap_list_Cons_1 ( * l_10));
    l_10 <- { l_10 with current = (let Type.Hashmap_List_Cons a b c =  * l_10 in Type.Hashmap_List_Cons a ( ^ v_19) c) };
    tl_20 <- borrow_mut (Type.hashmap_list_Cons_2 ( * l_10));
    l_10 <- { l_10 with current = (let Type.Hashmap_List_Cons a b c =  * l_10 in Type.Hashmap_List_Cons a b ( ^ tl_20)) };
    assume { Resolve2.resolve l_10 };
    assume { Resolve0.resolve _22 };
    _22 <-  * k_18;
    assume { Resolve7.resolve k_18 };
    assume { Resolve0.resolve _23 };
    _23 <- key_2;
    _21 <- _22 = _23;
    switch (_21)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve6.resolve self_1 };
    assume { Resolve0.resolve key_2 };
    assume { Resolve1.resolve index_4 };
    assume { Resolve8.resolve tl_20 };
    assume { Resolve4.resolve _25 };
    _25 <- val'_3;
    assume { Resolve4.resolve val'_3 };
    assume { Resolve4.resolve ( * v_19) };
    v_19 <- { v_19 with current = _25 };
    assume { Resolve9.resolve v_19 };
    _0 <- ();
    goto BB17
  }
  BB7 {
    assume { Resolve9.resolve v_19 };
    _27 <- borrow_mut ( * tl_20);
    tl_20 <- { tl_20 with current = ( ^ _27) };
    assume { Resolve8.resolve tl_20 };
    _26 <- borrow_mut ( * _27);
    _27 <- { _27 with current = ( ^ _26) };
    assume { Resolve2.resolve _27 };
    assume { Resolve2.resolve l_10 };
    l_10 <- _26;
    _16 <- ();
    assume { Resolve3.resolve _16 };
    goto BB4
  }
  BB8 {
    assume { Resolve2.resolve l_10 };
    _15 <- ();
    assume { Resolve3.resolve _15 };
    _35 <- borrow_mut (Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1));
    self_1 <- { self_1 with current = (let Type.Hashmap_MyHashMap a =  * self_1 in Type.Hashmap_MyHashMap ( ^ _35)) };
    assume { Resolve1.resolve _36 };
    _36 <- index_4;
    _34 <- IndexMut0.index_mut _35 _36;
    goto BB9
  }
  BB9 {
    _33 <- borrow_mut ( * _34);
    _34 <- { _34 with current = ( ^ _33) };
    assume { Resolve2.resolve _34 };
    _32 <- borrow_mut ( * _33);
    _33 <- { _33 with current = ( ^ _32) };
    _37 <- Type.Hashmap_List_Nil;
    l_31 <- Replace0.replace _32 _37;
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve _33 };
    assume { Resolve0.resolve _39 };
    _39 <- key_2;
    assume { Resolve0.resolve key_2 };
    assume { Resolve4.resolve _40 };
    _40 <- val'_3;
    assume { Resolve4.resolve val'_3 };
    assume { Resolve5.resolve _42 };
    _42 <- l_31;
    _41 <- _42;
    goto BB11
  }
  BB11 {
    _38 <- Type.Hashmap_List_Cons _39 _40 _41;
    goto BB12
  }
  BB12 {
    _44 <- borrow_mut (Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1));
    self_1 <- { self_1 with current = (let Type.Hashmap_MyHashMap a =  * self_1 in Type.Hashmap_MyHashMap ( ^ _44)) };
    assume { Resolve6.resolve self_1 };
    assume { Resolve1.resolve _45 };
    _45 <- index_4;
    assume { Resolve1.resolve index_4 };
    _43 <- IndexMut0.index_mut _44 _45;
    goto BB13
  }
  BB13 {
    assume { Resolve5.resolve ( * _43) };
    _43 <- { _43 with current = _38 };
    goto BB14
  }
  BB14 {
    assume { Resolve2.resolve _43 };
    goto BB15
  }
  BB15 {
    _0 <- ();
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module Hashmap_Main_Interface
  val main [@cfg:stackify] () : ()
end
module Hashmap_Main
  use mach.int.Int
  use mach.int.Int64
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.UInt32
  use Type
  clone Hashmap_BucketInv as BucketInv0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.hashmap_list
  clone Hashmap_Impl2_HashmapInv as HashmapInv0 with function Model0.model = Model2.model,
  predicate BucketInv0.bucket_inv = BucketInv0.bucket_inv
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.hashmap_myhashmap
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = ()
  clone Hashmap_Impl1_ModelTy as ModelTy0
  clone Hashmap_Impl1_Model as Model0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.hashmap_myhashmap,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone Hashmap_Impl2_Get_Interface as Get0 with predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
  function Model0.model = Model1.model
  clone Hashmap_Impl2_Add_Interface as Add0 with predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
  function Model0.model = Model0.model
  clone Hashmap_Create_Interface as Create0 with function Model0.model = Model0.model,
  predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.core_option_option int64
  let rec cfg main [@cfg:stackify] () : () = 
  var _0 : ();
  var none_1 : Type.core_option_option int64;
  var some17_2 : Type.core_option_option int64;
  var some42_3 : Type.core_option_option int64;
  var h1_4 : Type.hashmap_myhashmap;
  var h2_5 : Type.hashmap_myhashmap;
  var x_6 : Type.core_option_option int64;
  var _7 : Type.hashmap_myhashmap;
  var y_8 : Type.core_option_option int64;
  var _9 : Type.hashmap_myhashmap;
  var z_10 : Type.core_option_option int64;
  var _11 : Type.hashmap_myhashmap;
  var t_12 : Type.core_option_option int64;
  var _13 : Type.hashmap_myhashmap;
  var _14 : ();
  var _15 : ();
  var _16 : borrowed (Type.hashmap_myhashmap);
  var _17 : Type.core_option_option int64;
  var _18 : Type.hashmap_myhashmap;
  var _19 : Type.core_option_option int64;
  var _20 : Type.hashmap_myhashmap;
  var _21 : Type.core_option_option int64;
  var _22 : Type.hashmap_myhashmap;
  var _23 : Type.core_option_option int64;
  var _24 : Type.hashmap_myhashmap;
  var _25 : ();
  var _26 : ();
  var _27 : borrowed (Type.hashmap_myhashmap);
  var _28 : Type.core_option_option int64;
  var _29 : Type.hashmap_myhashmap;
  var _30 : Type.core_option_option int64;
  var _31 : Type.hashmap_myhashmap;
  var _32 : Type.core_option_option int64;
  var _33 : Type.hashmap_myhashmap;
  var _34 : Type.core_option_option int64;
  var _35 : Type.hashmap_myhashmap;
  var _36 : ();
  {
    goto BB0
  }
  BB0 {
    none_1 <- Type.Core_Option_Option_None;
    assume { Resolve0.resolve none_1 };
    some17_2 <- Type.Core_Option_Option_Some (17 : int64);
    assume { Resolve0.resolve some17_2 };
    some42_3 <- Type.Core_Option_Option_Some (42 : int64);
    assume { Resolve0.resolve some42_3 };
    h1_4 <- Create0.create (17 : usize);
    goto BB1
  }
  BB1 {
    h2_5 <- Create0.create (42 : usize);
    goto BB2
  }
  BB2 {
    _7 <- h1_4;
    x_6 <- Get0.get _7 (1 : uint32);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve x_6 };
    _9 <- h1_4;
    y_8 <- Get0.get _9 (2 : uint32);
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve y_8 };
    _11 <- h2_5;
    z_10 <- Get0.get _11 (1 : uint32);
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve z_10 };
    _13 <- h2_5;
    t_12 <- Get0.get _13 (2 : uint32);
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve t_12 };
    assert { x_6 = none_1 && y_8 = none_1 && z_10 = none_1 && t_12 = none_1 };
    _14 <- ();
    assume { Resolve1.resolve _14 };
    _16 <- borrow_mut h1_4;
    h1_4 <-  ^ _16;
    _15 <- Add0.add _16 (1 : uint32) (17 : int64);
    goto BB7
  }
  BB7 {
    _18 <- h1_4;
    _17 <- Get0.get _18 (1 : uint32);
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve x_6 };
    x_6 <- _17;
    _20 <- h1_4;
    _19 <- Get0.get _20 (2 : uint32);
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve y_8 };
    y_8 <- _19;
    _22 <- h2_5;
    _21 <- Get0.get _22 (1 : uint32);
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve z_10 };
    z_10 <- _21;
    _24 <- h2_5;
    _23 <- Get0.get _24 (2 : uint32);
    goto BB11
  }
  BB11 {
    assume { Resolve0.resolve t_12 };
    t_12 <- _23;
    assert { x_6 = some17_2 && y_8 = none_1 && z_10 = none_1 && t_12 = none_1 };
    _25 <- ();
    assume { Resolve1.resolve _25 };
    _27 <- borrow_mut h2_5;
    h2_5 <-  ^ _27;
    _26 <- Add0.add _27 (1 : uint32) (42 : int64);
    goto BB12
  }
  BB12 {
    _29 <- h1_4;
    _28 <- Get0.get _29 (1 : uint32);
    goto BB13
  }
  BB13 {
    assume { Resolve0.resolve x_6 };
    x_6 <- _28;
    _31 <- h1_4;
    _30 <- Get0.get _31 (2 : uint32);
    goto BB14
  }
  BB14 {
    assume { Resolve0.resolve y_8 };
    y_8 <- _30;
    _33 <- h2_5;
    _32 <- Get0.get _33 (1 : uint32);
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve z_10 };
    z_10 <- _32;
    _35 <- h2_5;
    _34 <- Get0.get _35 (2 : uint32);
    goto BB16
  }
  BB16 {
    assume { Resolve0.resolve t_12 };
    t_12 <- _34;
    assert { x_6 = some17_2 && y_8 = none_1 && z_10 = some42_3 && t_12 = none_1 };
    _36 <- ();
    assume { Resolve1.resolve _36 };
    _0 <- ();
    goto BB17
  }
  BB17 {
    assume { Resolve2.resolve h2_5 };
    goto BB18
  }
  BB18 {
    assume { Resolve2.resolve h1_4 };
    return _0
  }
  
end
module Hashmap_Impl0_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.hashmap_list) : Type.hashmap_list
end
module Hashmap_Impl0_Clone
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.hashmap_list) : Type.hashmap_list
end
module CreusotContracts_Std1_Clone_Clone_Clone_Interface
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module CreusotContracts_Std1_Clone_Clone_Clone
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Hashmap_Impl0
  use Type
  clone Hashmap_Impl0_Clone_Interface as Clone0
  clone CreusotContracts_Std1_Clone_Clone_Clone_Interface as Clone1 with type self = Type.hashmap_list,
  val clone' = Clone0.clone'
end
